/*
 * PROJECT:   LVGL PC Simulator using Visual Studio
 * FILE:      LVGL.Simulator.cpp
 * PURPOSE:   Implementation for LVGL ported to Windows Desktop
 *
 * LICENSE:   The MIT License
 *
 * DEVELOPER: Mouri_Naruto (Mouri_Naruto AT Outlook.com)
 */

#include <Windows.h>

#include "resource.h"

#if _MSC_VER >= 1200
 // Disable compilation warnings.
#pragma warning(push)
// nonstandard extension used : bit field types other than int
#pragma warning(disable:4214)
// 'conversion' conversion from 'type1' to 'type2', possible loss of data
#pragma warning(disable:4244)
#endif

#include "lvgl/lvgl.h"
#include "lvgl/examples/lv_examples.h"
#include "lvgl/demos/lv_demos.h"
#include "lv_drivers/win32drv/win32drv.h"

#if _MSC_VER >= 1200
// Restore compilation warnings.
#pragma warning(pop)
#endif
#include<string>
#include <stdio.h>

static lv_group_t* SYS_Freez;
static lv_group_t* DIA_Freez;
static lv_group_t* PUL_Freez;

static lv_obj_t* btnPara;
static lv_obj_t* labelPara;
static lv_obj_t* btnData;
static lv_obj_t* labelData;

static lv_obj_t* tabview;

static lv_obj_t* SYS_labelC;
static lv_obj_t* DIA_labelC;
static lv_obj_t* PUL_labelC;

static lv_obj_t* SYS_labelD;
static lv_obj_t* DIA_labelD;
static lv_obj_t* PUL_labelD;

static lv_obj_t* SYS_labelU;
static lv_obj_t* DIA_labelU;
static lv_obj_t* PUL_labelU;

static lv_obj_t* Systole_label;
static lv_obj_t* Diastole_label;
static lv_obj_t* Pulse_label;
static lv_obj_t* mbox1;

static lv_obj_t* PUL_btn_freez;
static lv_obj_t* DIA_btn_freez;
static lv_obj_t* SYS_btn_freez;

static lv_obj_t* PUL_lbl_freez;
static lv_obj_t* DIA_lbl_freez;
static lv_obj_t* SYS_lbl_freez;
static lv_obj_t* mboxErreur;

static void event_handlerSysCentaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(SYS_labelC, buf);
    }
}
static void event_handlerSysDizaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(SYS_labelD, buf);
    }
}
static void event_handlerSysUnite(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(SYS_labelU, buf);
    }
}
static void event_handlerDyaCentaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(DIA_labelC, buf);
    }
}
static void event_handlerDyaDizaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(DIA_labelD, buf);
    }
}
static void event_handlerDyaUnite(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(DIA_labelU, buf);
    }
}
static void event_handlerPulCentaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(PUL_labelC, buf);
    }
}
static void event_handlerPulDizaine(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(PUL_labelD, buf);
    }
}
static void event_handlerPulUnite(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* obj = lv_event_get_target(e);
    if (code == LV_EVENT_VALUE_CHANGED) {
        char buf[32];
        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        LV_LOG_USER("Selected value: %s", buf);
        lv_label_set_text(PUL_labelU, buf);
    }
}
static void event_cb(lv_event_t* e)
{
    lv_obj_t* obj = lv_event_get_current_target(e);
    LV_LOG_USER("Button %s clicked", lv_msgbox_get_active_btn_text(obj));
    lv_msgbox_close(mbox1);

}
static void btn_event_cb(lv_event_t* e)
{
    std::string data = "Sys:";
    data += lv_label_get_text(SYS_labelC);
    data += lv_label_get_text(SYS_labelD);
    data += lv_label_get_text(SYS_labelU);
    data += ":Dia:";
    data += lv_label_get_text(DIA_labelC);
    data += lv_label_get_text(DIA_labelD);
    data += lv_label_get_text(DIA_labelU);
    data += ":Pul:";
    data += lv_label_get_text(PUL_labelC);
    data += lv_label_get_text(PUL_labelD);
    data += lv_label_get_text(PUL_labelU);

    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        static const char* btns[] = { "Fermer","" };
        if (true == false) {

            mbox1 = lv_msgbox_create(NULL, "Message envoyer", "", btns, false);


            lv_obj_add_event_cb(mbox1, event_cb, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mbox1);
        }
        else {


            mbox1 = lv_msgbox_create(NULL, "Erreur de connexion", "", btns, false);
            lv_obj_add_event_cb(mbox1, event_cb, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mbox1);
        }

    }
}


static void btn_event_btn_Para(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        lv_obj_add_flag(btnPara, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(labelPara, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(btnData, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(labelData, LV_OBJ_FLAG_HIDDEN);
    }
}

static void SYS_btn_event_btn_suivant(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        lv_tabview_set_act(tabview, 1, LV_ANIM_ON);
    }
}
static void DIA_btn_event_btn_suivant(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        lv_tabview_set_act(tabview, 2, LV_ANIM_ON);
    }
}
static void PUL_btn_event_btn_suivant(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        lv_tabview_set_act(tabview, 3, LV_ANIM_ON);
    }
}

static void event_cbErreur(lv_event_t* e)
{
    lv_obj_t* obj = lv_event_get_current_target(e);
    LV_LOG_USER("Button %s clicked", lv_msgbox_get_active_btn_text(obj));
   // lv_msgbox_close(mbox1);
    lv_msgbox_close(mboxErreur);

}

static void btn_event_send_ERREUR(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        static const char* btns[] = { "Fermer","" };
        if (true == false) {

            mboxErreur = lv_msgbox_create(NULL, "Erreur envoyer", "", btns, false);


            lv_obj_add_event_cb(mboxErreur, event_cbErreur, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mboxErreur);
        }
        else {


            mboxErreur = lv_msgbox_create(NULL, "Erreur de connexion", "", btns, false);
            lv_obj_add_event_cb(mboxErreur, event_cbErreur, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mboxErreur);
        }

    }

}

static void btn_event_btn_Data(lv_event_t* e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        lv_obj_add_flag(btnPara, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(labelPara, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(btnData, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(labelData, LV_OBJ_FLAG_HIDDEN);
        tabview = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, 50);

        /*Add 3 tabs (the tabs are page (lv_page) and can be scrolled*/
        lv_obj_t* tab1 = lv_tabview_add_tab(tabview, "SYS");
        lv_obj_t* tab2 = lv_tabview_add_tab(tabview, "DIA");
        lv_obj_t* tab3 = lv_tabview_add_tab(tabview, "PUL");
        lv_obj_t* tab4 = lv_tabview_add_tab(tabview, "Res");
        static lv_style_t style_sel;
        lv_style_init(&style_sel);
        lv_style_set_text_font(&style_sel, &lv_font_montserrat_22);
        const char* opts = "0\n1\n2\n3\n4\n5\n6\n7\n8\n9";
        lv_obj_t* roller;

        /*A roller on the left with left aligned text, and custom width*/
        roller = lv_roller_create(tab1);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 10, 0);
        lv_obj_add_event_cb(roller, event_handlerSysCentaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab1);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 60, 0);
        lv_obj_add_event_cb(roller, event_handlerSysDizaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab1);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 110, 0);
        lv_obj_add_event_cb(roller, event_handlerSysUnite, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab2);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 10, 0);
        lv_obj_add_event_cb(roller, event_handlerDyaCentaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab2);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 60, 0);
        lv_obj_add_event_cb(roller, event_handlerDyaDizaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab2);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 110, 0);
        lv_obj_add_event_cb(roller, event_handlerDyaUnite, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab3);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 10, 0);
        lv_obj_add_event_cb(roller, event_handlerPulCentaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab3);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller, 3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 60, 0);
        lv_obj_add_event_cb(roller, event_handlerPulDizaine, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);

        roller = lv_roller_create(tab3);
        lv_roller_set_options(roller, opts, LV_ROLLER_MODE_INFINITE);
        lv_roller_set_visible_row_count(roller,3);
        lv_obj_set_width(roller, 45);
        lv_obj_add_style(roller, &style_sel, LV_PART_SELECTED);
        lv_obj_set_style_text_align(roller, LV_TEXT_ALIGN_LEFT, 0);
        lv_obj_align(roller, LV_ALIGN_LEFT_MID, 110, 0);
        lv_obj_add_event_cb(roller, event_handlerPulUnite, LV_EVENT_ALL, NULL);
        lv_roller_set_selected(roller, 2, LV_ANIM_OFF);


        /*********************************Btn valider et freez******************************************/
        PUL_btn_freez = lv_btn_create(tab3);
        lv_obj_set_size(PUL_btn_freez, 120, 50);
        lv_obj_align(PUL_btn_freez, LV_ALIGN_BOTTOM_MID, 10, 0);
        lv_obj_add_event_cb(PUL_btn_freez, PUL_btn_event_btn_suivant, LV_EVENT_ALL, NULL);

        DIA_btn_freez = lv_btn_create(tab2);
        lv_obj_set_size(DIA_btn_freez, 120, 50);
        lv_obj_align(DIA_btn_freez, LV_ALIGN_BOTTOM_MID, 10, 0);
        lv_obj_add_event_cb(DIA_btn_freez, DIA_btn_event_btn_suivant, LV_EVENT_ALL, NULL);

        SYS_btn_freez = lv_btn_create(tab1);
        lv_obj_set_size(SYS_btn_freez, 120, 50);
        lv_obj_align(SYS_btn_freez,LV_ALIGN_BOTTOM_MID ,10, 0);
        lv_obj_add_event_cb(SYS_btn_freez, SYS_btn_event_btn_suivant, LV_EVENT_ALL, NULL);

        PUL_lbl_freez = lv_label_create(PUL_btn_freez);
        lv_obj_center(PUL_lbl_freez);
        lv_label_set_text(PUL_lbl_freez, "Valider");

        DIA_lbl_freez = lv_label_create(DIA_btn_freez);
        lv_obj_center(DIA_lbl_freez);
        lv_label_set_text(DIA_lbl_freez, "Valider");

        SYS_lbl_freez= lv_label_create(SYS_btn_freez);
        lv_obj_center(SYS_lbl_freez);
        lv_label_set_text(SYS_lbl_freez, "Valider");

       /* lv_group_add_obj(SYS_Freez,roller);
        lv_group_focus_freeze(SYS_Freez, 0); */


        lv_obj_t* lblSysD = lv_label_create(tab4);
        lv_label_set_text(lblSysD, "Systole : ");
        lv_obj_align(lblSysD, LV_ALIGN_TOP_LEFT, 0, 0);
        lv_obj_t* lblPulD = lv_label_create(tab4);
        lv_label_set_text(lblPulD, "Pouls : ");
        lv_obj_align(lblPulD, LV_ALIGN_TOP_LEFT, 0, 30);
        lv_obj_t* lblDiaD = lv_label_create(tab4);
        lv_label_set_text(lblDiaD, "Diastole : ");
        lv_obj_align(lblDiaD, LV_ALIGN_TOP_LEFT, 0, 60);



        SYS_labelC = lv_label_create(tab4);
        lv_label_set_text(SYS_labelC, "2");
        lv_obj_align(SYS_labelC, LV_ALIGN_TOP_LEFT, 70, 0);

        SYS_labelD = lv_label_create(tab4);
        lv_label_set_text(SYS_labelD, "2");
        lv_obj_align(SYS_labelD, LV_ALIGN_TOP_LEFT, 80, 0);

        SYS_labelU = lv_label_create(tab4);
        lv_label_set_text(SYS_labelU, "2");
        lv_obj_align(SYS_labelU, LV_ALIGN_TOP_LEFT, 90, 0);

        DIA_labelC = lv_label_create(tab4);
        lv_label_set_text(DIA_labelC, "2");
        lv_obj_align(DIA_labelC, LV_ALIGN_TOP_LEFT, 70, 30);

        DIA_labelD = lv_label_create(tab4);
        lv_label_set_text(DIA_labelD, "2");
        lv_obj_align(DIA_labelD, LV_ALIGN_TOP_LEFT, 80, 30);

        DIA_labelU = lv_label_create(tab4);
        lv_label_set_text(DIA_labelU, "2");
        lv_obj_align(DIA_labelU, LV_ALIGN_TOP_LEFT, 90, 30);

        PUL_labelC = lv_label_create(tab4);
        lv_label_set_text(PUL_labelC, "2");
        lv_obj_align(PUL_labelC, LV_ALIGN_TOP_LEFT, 70, 60);

        PUL_labelD = lv_label_create(tab4);
        lv_label_set_text(PUL_labelD, "2");
        lv_obj_align(PUL_labelD, LV_ALIGN_TOP_LEFT, 80, 60);

        PUL_labelU = lv_label_create(tab4);
        lv_label_set_text(PUL_labelU, "2");
        lv_obj_align(PUL_labelU, LV_ALIGN_TOP_LEFT, 90, 60);







        lv_obj_t* lblSysF = lv_label_create(tab4);
        lv_label_set_text(lblSysF, "  mmHg");
        lv_obj_align(lblSysF, LV_ALIGN_TOP_LEFT, 95, 0);
        lv_obj_t* lblPulF = lv_label_create(tab4);
        lv_label_set_text(lblPulF, "  Pul/min");
        lv_obj_align(lblPulF, LV_ALIGN_TOP_LEFT, 95, 30);
        lv_obj_t* lblDiaF = lv_label_create(tab4);
        lv_label_set_text(lblDiaF, "  mmHg");
        lv_obj_align(lblDiaF, LV_ALIGN_TOP_LEFT, 95, 60);

   lv_obj_t* btnErreur = lv_btn_create(tab4);
        lv_obj_align(btnErreur, LV_ALIGN_BOTTOM_MID, 0, -65);
        lv_obj_set_size(btnErreur, 120, 50);
        lv_obj_add_event_cb(btnErreur, btn_event_send_ERREUR, LV_EVENT_ALL, NULL);

        lv_obj_t* labelErreur = lv_label_create(btnErreur);
        lv_label_set_text(labelErreur, "send Erreur");
        lv_obj_center(labelErreur);

        lv_obj_t* btn = lv_btn_create(tab4);
        lv_obj_align(btn, LV_ALIGN_BOTTOM_MID, 0, 0);
        lv_obj_set_size(btn, 120, 50);
        lv_obj_add_event_cb(btn, btn_event_cb, LV_EVENT_ALL, NULL);

        lv_obj_t* label = lv_label_create(btn);
        lv_label_set_text(label, "send");
        lv_obj_center(label);
    }
}




int main()
{
    lv_init();

    if (!lv_win32_init( GetModuleHandleW(NULL),SW_SHOW,185,278,LoadIconW(GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_LVGL))))
    {
        return -1;
    }
 lv_win32_add_all_input_devices_to_group(NULL);

        

         btnPara = lv_btn_create(lv_scr_act());     
        lv_obj_align(btnPara, LV_ALIGN_TOP_MID, 0, 2);
        lv_obj_set_size(btnPara, 120, 50);                         
       lv_obj_add_event_cb(btnPara, btn_event_btn_Para, LV_EVENT_ALL, NULL);          

         labelPara = lv_label_create(btnPara);          
        lv_label_set_text(labelPara, "parametre");                     
        lv_obj_center(labelPara);

         btnData = lv_btn_create(lv_scr_act());
        //lv_obj_align(btnData, LV_ALIGN_BOTTOM_MID, 0, -2);
         lv_obj_center(btnData);
        lv_obj_set_size(btnData, 120, 50);
        lv_obj_add_event_cb(btnData, btn_event_btn_Data, LV_EVENT_ALL, NULL);

        labelData = lv_label_create(btnData);
        lv_label_set_text(labelData, "data");
        lv_obj_center(labelData);



        
        /************************scroller **********************/

        


    //lv_obj_add_flag(tabViewDemarage, LV_OBJ_FLAG_HIDDEN);
    //lv_group_add_obj(group, obj)
    
    

    while (!lv_win32_quit_signal)
    {
        lv_task_handler();
        Sleep(2);
    }

    return 0;
}
