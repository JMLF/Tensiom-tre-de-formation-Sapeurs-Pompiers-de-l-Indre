/*
 * PROJECT:   LVGL PC Simulator using Visual Studio
 * FILE:      LVGL.Simulator.cpp
 * PURPOSE:   Implementation for LVGL ported to Windows Desktop
 *
 * LICENSE:   The MIT License
 *
 * DEVELOPER: Mouri_Naruto (Mouri_Naruto AT Outlook.com)
 */

#include <Windows.h>

#include "resource.h"

#if _MSC_VER >= 1200
 // Disable compilation warnings.
#pragma warning(push)
// nonstandard extension used : bit field types other than int
#pragma warning(disable:4214)
// 'conversion' conversion from 'type1' to 'type2', possible loss of data
#pragma warning(disable:4244)
#endif

#include "lvgl/lvgl.h"
#include "lvgl/examples/lv_examples.h"
#include "lvgl/demos/lv_demos.h"
#include "lv_drivers/win32drv/win32drv.h"
//#include "../../../Tensiom-tre-de-formation-Sapeurs-Pompiers-de-l-Indre/Telecommande etudiant 1/Client Tcp/ClasseClient.h"

#if _MSC_VER >= 1200
// Restore compilation warnings.
#pragma warning(pop)
#endif
#include<string>
#include <stdio.h>
static lv_obj_t* SYS_label;
static lv_obj_t* DIA_label;
static lv_obj_t* PUL_label;

static lv_obj_t* Systole_label;
static lv_obj_t* Diastole_label;
static lv_obj_t* Pulse_label;
static lv_obj_t* mbox1;

std::string test("test");

void slider_event_cbSYS(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val) / 100;
    float valMax = 300;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    test = real;
    lv_label_set_text(SYS_label, real.c_str());
    lv_label_set_text(Systole_label, real.c_str());
    lv_obj_align_to(SYS_label, arc, LV_ALIGN_CENTER, 0, 0);
};
void slider_event_cbDIA(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val) / 100;
    float valMax = 300;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    lv_label_set_text(DIA_label, real.c_str());
    lv_label_set_text(Diastole_label, real.c_str());
    lv_obj_align_to(DIA_label, arc, LV_ALIGN_CENTER, 0, 0);
};
void slider_event_cbPUL(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val) / 100;
    float valMax = 250;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    lv_label_set_text(PUL_label, real.c_str());
    lv_label_set_text(Pulse_label, real.c_str());
    lv_obj_align_to(PUL_label, arc, LV_ALIGN_CENTER, 0, 0);
};
static void event_cb(lv_event_t* e)
{
    lv_obj_t* obj = lv_event_get_current_target(e);
    LV_LOG_USER("Button %s clicked", lv_msgbox_get_active_btn_text(obj));
    lv_msgbox_close(mbox1);

}
static void btn_event_cb(lv_event_t* e)
{
    std::string data = "Sys:";
    data += lv_label_get_text(SYS_label);
    data += ":Dia:";
    data += lv_label_get_text(DIA_label);
    data += ":Pul:";
    data += lv_label_get_text(PUL_label);


    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t* btn = lv_event_get_target(e);
    if (code == LV_EVENT_CLICKED) {
        static const char* btns[] = { "Fermer" };
        if (true == false) {

            mbox1 = lv_msgbox_create(NULL, "Message envoyer", "", btns, false);


            lv_obj_add_event_cb(mbox1, event_cb, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mbox1);
        }
        else {


            mbox1 = lv_msgbox_create(NULL, "Erreur de connexion", "", btns, false);
            lv_obj_add_event_cb(mbox1, event_cb, LV_EVENT_VALUE_CHANGED, NULL);
            lv_obj_center(mbox1);
        }

    }
}

int main()
{
    lv_init();

    if (!lv_win32_init(
        GetModuleHandleW(NULL),
        SW_SHOW,
        185,
        278,
        LoadIconW(GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_LVGL))))
    {
        return -1;
    }

    lv_win32_add_all_input_devices_to_group(NULL);



  

    lv_obj_t* tabview;
    tabview = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, 50);

    /*Add 3 tabs (the tabs are page (lv_page) and can be scrolled*/
    lv_obj_t* tab1 = lv_tabview_add_tab(tabview, "SYS");
    lv_obj_t* tab2 = lv_tabview_add_tab(tabview, "DIA");
    lv_obj_t* tab3 = lv_tabview_add_tab(tabview, "PUL");
    lv_obj_t* tab4 = lv_tabview_add_tab(tabview, "Res");


    lv_obj_t* arcSys = lv_arc_create(tab1);
    lv_obj_set_size(arcSys, 150, 150);
    lv_arc_set_rotation(arcSys, 135);
    lv_arc_set_bg_angles(arcSys, 0, 270);
    lv_arc_set_value(arcSys, 50);
    lv_obj_center(arcSys);
    lv_obj_add_event_cb(arcSys, slider_event_cbSYS, LV_EVENT_VALUE_CHANGED, NULL);
    SYS_label = lv_label_create(tab1);
    lv_label_set_text(SYS_label, "150");
    lv_obj_align_to(SYS_label, arcSys, LV_ALIGN_CENTER, 0, 0);



    lv_obj_t* arcDia = lv_arc_create(tab2);
    lv_obj_set_size(arcDia, 150, 150);
    lv_arc_set_rotation(arcDia, 135);
    lv_arc_set_bg_angles(arcDia, 0, 270);
    lv_arc_set_value(arcDia, 50);
    lv_obj_center(arcDia);
    lv_obj_add_event_cb(arcDia, slider_event_cbDIA, LV_EVENT_VALUE_CHANGED, NULL);
    DIA_label = lv_label_create(tab2);
    lv_label_set_text(DIA_label, "150");
    lv_obj_align_to(DIA_label, arcDia, LV_ALIGN_CENTER, 0, 0);

    lv_obj_t* arcPUL = lv_arc_create(tab3);
    lv_obj_set_size(arcPUL, 150, 150);
    lv_arc_set_rotation(arcPUL, 135);
    lv_arc_set_bg_angles(arcPUL, 0, 270);
    lv_arc_set_value(arcPUL, 50);
    lv_obj_center(arcPUL);
    lv_obj_add_event_cb(arcPUL, slider_event_cbPUL, LV_EVENT_VALUE_CHANGED, NULL);
    PUL_label = lv_label_create(tab3);
    lv_label_set_text(PUL_label, "125");
    lv_obj_align_to(PUL_label, arcPUL, LV_ALIGN_CENTER, 0, 0);








    lv_obj_t* lblSysD = lv_label_create(tab4);
    lv_label_set_text(lblSysD, "Systole : ");
    lv_obj_align(lblSysD, LV_ALIGN_TOP_LEFT, 0, 0);
    lv_obj_t* lblPulD = lv_label_create(tab4);
    lv_label_set_text(lblPulD, "Pouls : ");
    lv_obj_align(lblPulD, LV_ALIGN_TOP_LEFT, 0, 30);
    lv_obj_t* lblDiaD = lv_label_create(tab4);
    lv_label_set_text(lblDiaD, "Diastole : ");
    lv_obj_align(lblDiaD, LV_ALIGN_TOP_LEFT, 0, 60);



    Pulse_label = lv_label_create(tab4);
    lv_label_set_text(Pulse_label, "125");
    lv_obj_align(Pulse_label, LV_ALIGN_TOP_LEFT, 70, 30);

    Systole_label = lv_label_create(tab4);
    lv_label_set_text(Systole_label, "150");
    lv_obj_align(Systole_label, LV_ALIGN_TOP_LEFT, 70, 0);

    Diastole_label = lv_label_create(tab4);
    lv_label_set_text(Diastole_label, "150");
    lv_obj_align(Diastole_label, LV_ALIGN_TOP_LEFT, 70, 60);

    lv_obj_t* lblSysF = lv_label_create(tab4);
    lv_label_set_text(lblSysF, " mmHg");
    lv_obj_align(lblSysF, LV_ALIGN_TOP_LEFT, 95, 0);
    lv_obj_t* lblPulF = lv_label_create(tab4);
    lv_label_set_text(lblPulF, " Pul/min");
    lv_obj_align(lblPulF, LV_ALIGN_TOP_LEFT, 95, 30);
    lv_obj_t* lblDiaF = lv_label_create(tab4);
    lv_label_set_text(lblDiaF, " mmHg");
    lv_obj_align(lblDiaF, LV_ALIGN_TOP_LEFT, 95, 60);

    lv_obj_t* btn = lv_btn_create(tab4);
    lv_obj_align(btn, LV_ALIGN_BOTTOM_MID, 0, 0);
    lv_obj_set_size(btn, 120, 50);
    lv_obj_add_event_cb(btn, btn_event_cb, LV_EVENT_ALL, NULL);

    lv_obj_t* label = lv_label_create(btn);
    lv_label_set_text(label, "send");
    lv_obj_center(label);

  

    while (!lv_win32_quit_signal)
    {
        lv_task_handler();
        Sleep(2);
    }

    return 0;
}
