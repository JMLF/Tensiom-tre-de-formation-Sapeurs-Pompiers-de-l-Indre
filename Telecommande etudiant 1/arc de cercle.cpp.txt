/*
 * PROJECT:   LVGL PC Simulator using Visual Studio
 * FILE:      LVGL.Simulator.cpp
 * PURPOSE:   Implementation for LVGL ported to Windows Desktop
 *
 * LICENSE:   The MIT License
 *
 * DEVELOPER: Mouri_Naruto (Mouri_Naruto AT Outlook.com)
 */

#include <Windows.h>

#include "resource.h"

#if _MSC_VER >= 1200
 // Disable compilation warnings.
#pragma warning(push)
// nonstandard extension used : bit field types other than int
#pragma warning(disable:4214)
// 'conversion' conversion from 'type1' to 'type2', possible loss of data
#pragma warning(disable:4244)
#endif

#include "lvgl/lvgl.h"
#include "lvgl/examples/lv_examples.h"
#include "lvgl/demos/lv_demos.h"
#include "lv_drivers/win32drv/win32drv.h"
//#include "../../../Tensiom-tre-de-formation-Sapeurs-Pompiers-de-l-Indre/Telecommande etudiant 1/Client Tcp/ClasseClient.h"

#if _MSC_VER >= 1200
// Restore compilation warnings.
#pragma warning(pop)
#endif
#include<string>
#include <stdio.h>
static lv_obj_t* SYS_label;
static lv_obj_t* DIA_label;
static lv_obj_t* PUL_label;

static lv_obj_t* Systole_label;
static lv_obj_t* Diastole_label;
static lv_obj_t* Pulse_label;

std::string test("test");

void slider_event_cbSYS(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val)/100;
    float valMax = 300;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    test = real;
    lv_label_set_text(SYS_label, real.c_str());
    lv_label_set_text(Systole_label, real.c_str());
    lv_obj_align_to(SYS_label, arc, LV_ALIGN_CENTER, 0, 0);
};
void slider_event_cbDIA(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val) / 100;
    float valMax = 300;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    lv_label_set_text(DIA_label, real.c_str());
    lv_label_set_text(Diastole_label, real.c_str());
    lv_obj_align_to(DIA_label, arc, LV_ALIGN_CENTER, 0, 0);
};
void slider_event_cbPUL(lv_event_t* e) {
    lv_obj_t* arc = lv_event_get_target(e);
    char buf[8];
    lv_snprintf(buf, sizeof(buf), "%d%%", (int)lv_arc_get_value(arc));
    std::string val(buf);
    float Pourcentage = std::stof(val) / 100;
    float valMax = 250;
    int Valeur = valMax * Pourcentage;
    std::string real = std::to_string(Valeur);
    lv_label_set_text(PUL_label, real.c_str());
    lv_label_set_text(Pulse_label, real.c_str());
    lv_obj_align_to(PUL_label, arc, LV_ALIGN_CENTER, 0, 0);
};


int main()
{
    lv_init();

    if (!lv_win32_init(
        GetModuleHandleW(NULL),
        SW_SHOW,
        185,
        278,
        LoadIconW(GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_LVGL))))
    {
        return -1;
    }

    lv_win32_add_all_input_devices_to_group(NULL);
    

 
    // exemple lbl;

   /* lv_obj_t* label = lv_label_create(lv_scr_act());
    lv_label_set_text(label, "Hello world  !!!");
    lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);*/

    //style slider
    /*static lv_style_t style_indic;
    lv_style_init(&style_indic);
    lv_style_set_bg_color(&style_indic, lv_palette_lighten(LV_PALETTE_RED, 3));
    lv_style_set_bg_grad_color(&style_indic, lv_palette_main(LV_PALETTE_RED));
    lv_style_set_bg_grad_dir(&style_indic, LV_GRAD_DIR_HOR);

    static lv_style_t style_indic_pr;
    lv_style_init(&style_indic_pr);
    lv_style_set_shadow_color(&style_indic_pr, lv_palette_main(LV_PALETTE_RED));
    lv_style_set_shadow_width(&style_indic_pr, 10);
    lv_style_set_shadow_spread(&style_indic_pr, 3);*/

    // slider
  /*  lv_obj_t* obj = lv_slider_create(lv_scr_act());
    lv_obj_add_style(obj, &style_indic, LV_PART_INDICATOR);
    lv_obj_add_style(obj, &style_indic_pr, LV_PART_INDICATOR | LV_STATE_PRESSED);
    lv_slider_set_value(obj, 70, LV_ANIM_OFF);
    lv_obj_center(obj);*/
  /*  lv_obj_t* slider = lv_slider_create(lv_scr_act());

    lv_obj_add_style(slider, &style_indic, LV_PART_INDICATOR);
    lv_obj_add_style(slider, &style_indic_pr, LV_PART_INDICATOR | LV_STATE_PRESSED);
    lv_obj_set_x(slider, 10);
    lv_obj_set_y(slider, 10);
    lv_obj_set_size(slider, 300, 0);
    lv_slider_set_value(slider, 50,LV_ANIM_OFF);*/
    //lv_slider_set_knob_in(slider, true);



  /*  lv_obj_t* cbSys = lv_checkbox_create(lv_scr_act());
    lv_checkbox_set_text(cbSys, "SYS");
    lv_obj_add_event_cb(cbSys, event_handler, LV_EVENT_ALL, NULL);
    lv_obj_align(cbSys, LV_ALIGN_TOP_LEFT, 0, 0);

    lv_obj_t* cbDia = lv_checkbox_create(lv_scr_act());
    lv_checkbox_set_text(cbDia, "DIA");
    lv_obj_add_event_cb(cbDia, event_handler, LV_EVENT_ALL, NULL);
    lv_obj_align(cbDia, LV_ALIGN_TOP_MID , 0, 0);

    lv_obj_t* cbPUL = lv_checkbox_create(lv_scr_act());
    lv_checkbox_set_text(cbPUL, "PUL");
    lv_obj_add_event_cb(cbPUL, event_handler, LV_EVENT_ALL, NULL);
    lv_obj_align(cbPUL, LV_ALIGN_TOP_RIGHT, 0, 0);

    lv_obj_t* tabview;
    tabview = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, 50);*/

    /*Add 3 tabs (the tabs are page (lv_page) and can be scrolled*/
    
    lv_obj_t* tabview;
    tabview = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, 50);

    /*Add 3 tabs (the tabs are page (lv_page) and can be scrolled*/
    lv_obj_t* tab1 = lv_tabview_add_tab(tabview, "SYS");
    lv_obj_t* tab2 = lv_tabview_add_tab(tabview, "DIA");
    lv_obj_t* tab3 = lv_tabview_add_tab(tabview, "PUL");
    lv_obj_t* tab4 = lv_tabview_add_tab(tabview, "Res");

 
    lv_obj_t* arcSys = lv_arc_create(tab1);
    lv_obj_set_size(arcSys, 150, 150);
    lv_arc_set_rotation(arcSys, 135);
    lv_arc_set_bg_angles(arcSys, 0, 270);
    lv_arc_set_value(arcSys, 50);
    lv_obj_center(arcSys);
    lv_obj_add_event_cb(arcSys, slider_event_cbSYS, LV_EVENT_VALUE_CHANGED, NULL);
    SYS_label = lv_label_create(tab1);
    lv_label_set_text(SYS_label, "150");
    lv_obj_align_to(SYS_label, arcSys, LV_ALIGN_CENTER, 0, 0);



    lv_obj_t* arcDia = lv_arc_create(tab2);
    lv_obj_set_size(arcDia, 150, 150);
    lv_arc_set_rotation(arcDia, 135);
    lv_arc_set_bg_angles(arcDia, 0, 270);
    lv_arc_set_value(arcDia, 50);
    lv_obj_center(arcDia);
    lv_obj_add_event_cb(arcDia, slider_event_cbDIA, LV_EVENT_VALUE_CHANGED, NULL);
    DIA_label = lv_label_create(tab2);
    lv_label_set_text(DIA_label, "150");
    lv_obj_align_to(DIA_label, arcDia, LV_ALIGN_CENTER, 0, 0);

    lv_obj_t* arcPUL = lv_arc_create(tab3);
    lv_obj_set_size(arcPUL, 150, 150);
    lv_arc_set_rotation(arcPUL, 135);
    lv_arc_set_bg_angles(arcPUL, 0, 270);
    lv_arc_set_value(arcPUL, 50);
    lv_obj_center(arcPUL);
    lv_obj_add_event_cb(arcPUL, slider_event_cbPUL, LV_EVENT_VALUE_CHANGED, NULL);
    PUL_label = lv_label_create(tab3);
    lv_label_set_text(PUL_label, "125");
    lv_obj_align_to(PUL_label, arcPUL, LV_ALIGN_CENTER, 0, 0);


  
  
  



    lv_obj_t* lblSysD = lv_label_create(tab4);
    lv_label_set_text(lblSysD, "Systole : ");
    lv_obj_align(lblSysD, LV_ALIGN_TOP_LEFT, 0, 0);
    lv_obj_t* lblPulD = lv_label_create(tab4);
    lv_label_set_text(lblPulD, "Pouls : ");
    lv_obj_align(lblPulD, LV_ALIGN_TOP_LEFT, 0, 30);
    lv_obj_t* lblDiaD = lv_label_create(tab4);
    lv_label_set_text(lblDiaD, "Diastole : ");
    lv_obj_align(lblDiaD, LV_ALIGN_TOP_LEFT, 0, 60);


   
   Pulse_label = lv_label_create(tab4);
   lv_label_set_text(Pulse_label, "125");
   lv_obj_align(Pulse_label, LV_ALIGN_TOP_LEFT, 70, 30);

   Systole_label = lv_label_create(tab4);
   lv_label_set_text(Systole_label, "150");
   lv_obj_align(Systole_label, LV_ALIGN_TOP_LEFT, 70, 0);

   Diastole_label = lv_label_create(tab4);
   lv_label_set_text(Diastole_label, "150");
   lv_obj_align(Diastole_label, LV_ALIGN_TOP_LEFT, 70, 60);

   lv_obj_t* lblSysF = lv_label_create(tab4);
   lv_label_set_text(lblSysF, " mmHg");
   lv_obj_align(lblSysF, LV_ALIGN_TOP_LEFT, 95, 0);
   lv_obj_t* lblPulF = lv_label_create(tab4);
   lv_label_set_text(lblPulF, " Pul/min");
   lv_obj_align(lblPulF, LV_ALIGN_TOP_LEFT, 95, 30);
   lv_obj_t* lblDiaF = lv_label_create(tab4);
   lv_label_set_text(lblDiaF, " mmHg");
   lv_obj_align(lblDiaF, LV_ALIGN_TOP_LEFT, 95, 60);
   
   lv_obj_t* btn = lv_btn_create(tab4);
   lv_obj_align(btn, LV_ALIGN_BOTTOM_MID, 0, 0);
   lv_obj_set_size(btn, 120, 50);

   lv_obj_t* label = lv_label_create(btn);
   lv_label_set_text(label, "send");
   lv_obj_center(label);
   
   /* //arc de cercle
    lv_obj_t* arc = lv_arc_create(lv_scr_act());
    lv_obj_set_size(arc, 150, 150);
    lv_arc_set_rotation(arc, 135);
    lv_arc_set_bg_angles(arc, 0, 270);
    lv_arc_set_value(arc, 50);
     lv_obj_center(arc);

    
    
    lv_obj_add_event_cb(arc, slider_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
    */
    /*Create a label below the slider*/
    /*
    slider_label = lv_label_create(lv_scr_act());
    lv_label_set_text(slider_label, "150");

    lv_obj_align_to(slider_label, arc, LV_ALIGN_CENTER, 0, 0);
  
    */

      

    /*
     * Demos, benchmarks, and tests.
     *
     * Uncomment any one (and only one) of the functions below to run that
     * item.
     */

    // ----------------------------------
    // my freetype application
    // ----------------------------------

    ///*Init freetype library
    // *Cache max 64 faces and 1 size*/
    //lv_freetype_init(64, 1, 0);

    ///*Create a font*/
    //static lv_ft_info_t info;
    //info.name = "./lvgl/src/extra/libs/freetype/arial.ttf";
    //info.weight = 36;
    //info.style = FT_FONT_STYLE_NORMAL;
    //lv_ft_font_init(&info);

    ///*Create style with the new font*/
    //static lv_style_t style;
    //lv_style_init(&style);
    //lv_style_set_text_font(&style, info.font);

    ///*Create a label with the new style*/
    //lv_obj_t* label = lv_label_create(lv_scr_act());
    //lv_obj_add_style(label, &style, 0);
    //lv_label_set_text(label, "FreeType Arial Test");

    // ----------------------------------
    // my Win32 filesystem driver application
    // ----------------------------------

    /*::lv_fs_win32_init();

    lv_fs_dir_t d;
    if (lv_fs_dir_open(&d, "/") == LV_FS_RES_OK)
    {
        char b[MAX_PATH];
        memset(b, 0, MAX_PATH);
        while (lv_fs_dir_read(&d, b) == LV_FS_RES_OK)
        {
            printf("%s\n", b);
        }

        lv_fs_dir_close(&d);
    }*/

    // ----------------------------------
    // Demos from lv_examples
    // ----------------------------------

    // lv_demo_widgets();           // ok
    // lv_demo_benchmark();
    //lv_demo_keypad_encoder();    // ok
    // lv_demo_music();             // removed from repository
    // lv_demo_printer();           // removed from repository
    // lv_demo_stress();            // ok

    // ----------------------------------
    // LVGL examples
    // ----------------------------------

    /*
     * There are many examples of individual widgets found under the
     * lvgl\exampless directory.  Here are a few sample test functions.
     * Look in that directory to find all the rest.
     */

    // lv_ex_get_started_1();
    // lv_ex_get_started_2();
    // lv_ex_get_started_3();

    // lv_example_flex_1();
    // lv_example_flex_2();
    // lv_example_flex_3();
    // lv_example_flex_4();
    // lv_example_flex_5();
    // lv_example_flex_6();        // ok

    // lv_example_grid_1();
    // lv_example_grid_2();
    // lv_example_grid_3();
    // lv_example_grid_4();
    // lv_example_grid_5();
    // lv_example_grid_6();

    // lv_port_disp_template();
    // lv_port_fs_template();
    // lv_port_indev_template();

    // lv_example_scroll_1();
    // lv_example_scroll_2();
    // lv_example_scroll_3();

    // lv_example_style_1();
    // lv_example_style_2();
    // lv_example_style_3();
    // lv_example_style_4();        // ok
    // lv_example_style_6();        // file has no source code
    // lv_example_style_7();
    // lv_example_style_8();
    // lv_example_style_9();
    // lv_example_style_10();
    // lv_example_style_11();       // ok

    // ----------------------------------
    // LVGL widgets examples
    // ----------------------------------

    // lv_example_arc_1();
    // lv_example_arc_2();

    // lv_example_bar_1();          // ok
    // lv_example_bar_2();
    // lv_example_bar_3();
    // lv_example_bar_4();
    // lv_example_bar_5();
    // lv_example_bar_6();          // issues

    // lv_example_btn_1();
    // lv_example_btn_2();
    // lv_example_btn_3();

    // lv_example_btnmatrix_1();
    // lv_example_btnmatrix_2();
    // lv_example_btnmatrix_3();

    // lv_example_calendar_1();

    // lv_example_canvas_1();
    // lv_example_canvas_2();

    // lv_example_chart_1();        // ok
    // lv_example_chart_2();        // ok
    // lv_example_chart_3();        // ok
    // lv_example_chart_4();        // ok
    // lv_example_chart_5();        // ok
    // lv_example_chart_6();        // ok

    // lv_example_checkbox_1();

    // lv_example_colorwheel_1();   // ok

    // lv_example_dropdown_1();
    // lv_example_dropdown_2();
    // lv_example_dropdown_3();

    // lv_example_img_1();
    // lv_example_img_2();
    // lv_example_img_3();
    // lv_example_img_4();         // ok

    // lv_example_imgbtn_1();

    // lv_example_keyboard_1();    // ok

    // lv_example_label_1();
    // lv_example_label_2();       // ok

    // lv_example_led_1();

    // lv_example_line_1();

    // lv_example_list_1();

    // lv_example_meter_1();
    // lv_example_meter_2();
    // lv_example_meter_3();
    // lv_example_meter_4();       // ok

    // lv_example_msgbox_1();

    // lv_example_obj_1();         // ok

    // lv_example_roller_1();
    // lv_example_roller_2();      // ok

    // lv_example_slider_1();      // ok
    // lv_example_slider_2();      // issues
    // lv_example_slider_3();      // issues

    // lv_example_spinbox_1();

    // lv_example_spinner_1();     // ok

    // lv_example_switch_1();      // ok

    // lv_example_table_1();
    // lv_example_table_2();       // ok

    // lv_example_tabview_1();

    // lv_example_textarea_1();    // ok
    // lv_example_textarea_2();
    // lv_example_textarea_3();    // ok, but not all button have functions

    // lv_example_tileview_1();    // ok

    // lv_example_win_1();         // ok

    // ----------------------------------
    // Task handler loop
    // ----------------------------------

    while (!lv_win32_quit_signal)
    {
        lv_task_handler();
        Sleep(2);
    }

    return 0;
}
